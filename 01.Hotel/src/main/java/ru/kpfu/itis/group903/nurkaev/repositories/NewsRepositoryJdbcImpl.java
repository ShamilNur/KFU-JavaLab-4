package ru.kpfu.itis.group903.nurkaev.repositories;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import ru.kpfu.itis.group903.nurkaev.models.News;
import ru.kpfu.itis.group903.nurkaev.queries.UserQueries;

import javax.sql.DataSource;
import java.util.*;

import static ru.kpfu.itis.group903.nurkaev.queries.NewsQueries.*;

/**
 * @author Shamil Nurkaev @nshamil
 * 11-903
 * Sem 1
 */

@Repository(value = "newsRepository")
public class NewsRepositoryJdbcImpl implements NewsRepository {
    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    private final RowMapper<News> newsRowMapper = (row, rowNumber) -> News.builder()
            .id(row.getLong("id"))
            .title(row.getString("title"))
            .description(row.getString("description"))
            .photo(row.getString("photo"))
            .build();

    @Autowired
    public NewsRepositoryJdbcImpl(DataSource dataSource) {
        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
    }

    @Override
    public void save(News entity) {
        Map<String, Object> params = new HashMap<>();
        params.put("title", entity.getTitle());
        params.put("description", entity.getDescription());
        params.put("photo", entity.getPhoto());
        // Saving the entity and setting the id value generated by the database
        SqlParameterSource sqlParameterSource = new MapSqlParameterSource(params);
        KeyHolder keyHolder = new GeneratedKeyHolder();
        namedParameterJdbcTemplate.update(UserQueries.SQL_INSERT, sqlParameterSource, keyHolder);
        Long id = Long.parseLong(Objects.requireNonNull(keyHolder.getKeys(),
                "The key was not generated, error with the database has occurred.")
                .get("id").toString());
        entity.setId(id);
    }

    @Override
    public void update(News entity) {
        Map<String, Object> params = new HashMap<>();
        params.put("id", entity.getId());
        params.put("title", entity.getTitle());
        params.put("description", entity.getDescription());
        params.put("photo", entity.getPhoto());
        namedParameterJdbcTemplate.update(SQL_UPDATE_BY_ID, params);
    }

    @Override
    public void delete(News entity) {
        namedParameterJdbcTemplate.update(SQL_DELETE_BY_ID,
                Collections.singletonMap("id", entity.getId()));
    }

    @Override
    public Optional<News> findById(Long id) {
        News news;
        try {
            news = namedParameterJdbcTemplate.queryForObject(SQL_SELECT_BY_ID,
                    Collections.singletonMap("id", id), newsRowMapper);
        } catch (EmptyResultDataAccessException e) {
            news = null;
        }

        return Optional.ofNullable(news);
    }

    @Override
    public List<News> findByTag(String tagName) {
        return namedParameterJdbcTemplate.query(SQL_SELECT_BY_TAG,
                Collections.singletonMap("tag_name", tagName), newsRowMapper);
    }

    @Override
    public List<News> findAll() {
        return namedParameterJdbcTemplate.query(SQL_SELECT, newsRowMapper);
    }
}